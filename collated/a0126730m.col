//@author: a0126730m



	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\junit\ui\GUIBehaviorTest.java
	 */

package whatsupnext.junit.ui;

import static org.junit.Assert.*;

import java.awt.event.ActionListener;
import java.util.Calendar;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JTextPane;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import whatsupnext.logic.Logic;
import whatsupnext.logic.LogicUtilities;
import whatsupnext.storage.Storage;
import whatsupnext.ui.GUIOneWindow;
import whatsupnext.structure.enums.OPCODE;
import whatsupnext.structure.enums.Types;
import whatsupnext.structure.enums.Types.DELETETYPE;
import whatsupnext.structure.util.Task;

public class GUIBehaviorTest {
	private WhatsUpNextGUIStub gui;
	private JTextPane textDisplayMain;
	private JTextPane textDisplayUpcoming;
	private JTextPane textDisplayFloating;
	private JButton buttonEnter;
	private JButton buttonUpcoming;
	private JButton buttonFloating;
	private JTextField textInput;

	private String currentYear;

	private class WhatsUpNextGUIStub extends GUIOneWindow {
		private Logic logic;

		public WhatsUpNextGUIStub(String fileName) {
			super(fileName);
			logic = new Logic(fileName);
		}

		public void clearFile() {
			Task delete = new Task();
			delete.setOpcode(OPCODE.DELETE);
			delete.setDeleteType(DELETETYPE.ALL);
			logic.executeTask(delete);

			Storage storage = Storage.getInstance();
			try {
				storage.clearFile();
				storage.deleteFileVersions();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * Returns in ddmmyyyy
	 */
	private String getTodayDate() {
		Calendar cal = Calendar.getInstance();
		String year = Integer.toString(cal.get(Calendar.YEAR));
		String twoDigitMonth = convertToTwoDigits(cal.get(Calendar.MONTH) + 1);
		String twoDigitDayOfMonth = convertToTwoDigits(cal.get(Calendar.DAY_OF_MONTH));     
		return twoDigitDayOfMonth + twoDigitMonth + year;
	}

	private String getTodayDateForFormat(String time) {
		Calendar cal = Calendar.getInstance();
		String year = Integer.toString(cal.get(Calendar.YEAR));
		String twoDigitMonth = convertToTwoDigits(cal.get(Calendar.MONTH) + 1);
		String twoDigitDayOfMonth = convertToTwoDigits(cal.get(Calendar.DAY_OF_MONTH));     
		return year + twoDigitMonth + twoDigitDayOfMonth + time;
	}

	/**
	 * Returns in ddmmyyyy
	 */
	private String getTomorrowDate() {
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DAY_OF_MONTH, 1);
		String year = Integer.toString(cal.get(Calendar.YEAR));
		String twoDigitMonth = convertToTwoDigits(cal.get(Calendar.MONTH) + 1);
		String twoDigitDayOfMonth = convertToTwoDigits(cal.get(Calendar.DAY_OF_MONTH));     
		return twoDigitDayOfMonth + twoDigitMonth + year;
	}
	
	private String getTomorrowDateForFormat(String time) {
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DAY_OF_MONTH, 1);
		String year = Integer.toString(cal.get(Calendar.YEAR));
		String twoDigitMonth = convertToTwoDigits(cal.get(Calendar.MONTH) + 1);
		String twoDigitDayOfMonth = convertToTwoDigits(cal.get(Calendar.DAY_OF_MONTH));     
		return year + twoDigitMonth + twoDigitDayOfMonth + time;
	}

	private String convertToTwoDigits(int possibleSingleDigit) {
		if (possibleSingleDigit < 10) {
			return "0" + possibleSingleDigit;
		} else {
			return "" + possibleSingleDigit;
		}
	}

	@Before
	public void setupGUI() {
		gui = new WhatsUpNextGUIStub("guiTest");

		Calendar cal = Calendar.getInstance();
		currentYear = Integer.toString(cal.get(Calendar.YEAR));
	}

	@Before
	public void initializeWidgets() {
		textDisplayMain = (JTextPane)GUITestUtils.getChildNamed(gui.getMainFrame(), "textDisplayMain");
		textDisplayUpcoming = (JTextPane)GUITestUtils.getChildNamed(gui.getMainFrame(), "textDisplayUpcoming");
		textDisplayFloating = (JTextPane)GUITestUtils.getChildNamed(gui.getMainFrame(), "textDisplayFloating");
		assertNotNull("Can't acess the main text display JTextPane", textDisplayMain);
		assertNotNull("Can't acess the upcoming task text area JTextPane", textDisplayUpcoming);
		assertNotNull("Can't acess the floating task text area JTextPane", textDisplayFloating);

		buttonEnter = (JButton)GUITestUtils.getChildNamed(gui.getMainFrame(), "buttonEnter");
		buttonUpcoming = (JButton)GUITestUtils.getChildNamed(gui.getMainFrame(), "buttonUpcoming");
		buttonFloating = (JButton)GUITestUtils.getChildNamed(gui.getMainFrame(), "buttonFloating");
		assertNotNull("Can't acess the main enter button JButton", buttonEnter);
		assertNotNull("Can't acess the upcoming task button JButton", buttonUpcoming);
		assertNotNull("Can't acess the floating task button JButton", buttonFloating);

		textInput = (JTextField)GUITestUtils.getChildNamed(gui.getMainFrame(), "textInput");
		assertNotNull("Can't acess the user CLI JTextField", textInput);
	}

	@After
	public void clearTestFile() {
		gui.clearFile();
	}

	@Test
	public void ClickUpcomingTasksButtonWhenEmptyTest() {
		ActionListener[] als = (ActionListener[])(buttonUpcoming.getListeners(ActionListener.class));
		assertEquals(1, als.length);

		buttonUpcoming.doClick();

		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
	}

	@Test
	public void ClickEnterButtonWhenEmptyTest() {
		ActionListener[] als = (ActionListener[])(buttonEnter.getListeners(ActionListener.class));
		assertEquals(1, als.length);

		buttonEnter.doClick();

		assertEquals("\nEmpty command\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
	}

	@Test
	public void PressEnterOnCLIWhenEmptyTest() {
		ActionListener[] als = (ActionListener[])(textInput.getListeners(ActionListener.class));
		assertEquals(1, als.length);

		textInput.postActionEvent();

		assertEquals("\nEmpty command\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
	}

	@Test
	public void UserInputTextFieldTest() {
		textInput.setText("test input text");
		assertEquals("test input text", textInput.getText());
	}

	@Test
	public void AddTaskTest() {
		textInput.setText("add floating task test");
		buttonEnter.doClick();

		assertEquals("\nSuccessfully added to task 1.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("1: floating task test\n\tNot done.", textDisplayFloating.getText());
	}

	@Test
	public void AddTaskByTest() {
		textInput.setText("add byTaskTest by " + getTomorrowDate());
		buttonEnter.doClick();

		String formattedUpcomingTime = LogicUtilities.getFormattedTime(getTomorrowDateForFormat("2359")).replaceAll(currentYear, "");
		assertEquals(
				"\nSuccessfully added to task 1.\n\tDeadline:" + formattedUpcomingTime + "\n",
				textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("No tasks to display!", textDisplayFloating.getText());

		textInput.setText("add byTaskTest2 by " + getTodayDate());
		buttonEnter.doClick();

		formattedUpcomingTime = LogicUtilities.getFormattedTime(getTodayDateForFormat("2359")).replaceAll(currentYear, "");
		assertEquals(
				"\nSuccessfully added to task 2.\n\tDeadline:" + formattedUpcomingTime + "\n",
				textDisplayMain.getText());
		assertEquals("2: byTaskTest2\n\tEnd Time:" + formattedUpcomingTime + "\n\tNot done.", textDisplayUpcoming.getText());
		assertEquals("No tasks to display!", textDisplayFloating.getText());
	}

	@Test
	public void AddTaskFromToDateTest() {
		textInput.setText(
				"add fromToTaskTest" +
						" from 8 am " + getTomorrowDate() +
						" to 8 pm " + getTomorrowDate());
		buttonEnter.doClick();

		String formattedUpcomingTime = LogicUtilities.getFormattedTime(getTomorrowDateForFormat("2000")).replaceAll(currentYear, "");
		assertEquals(
				"\nSuccessfully added to task 1.\n\tDeadline:" + formattedUpcomingTime + "\n",
				textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("No tasks to display!", textDisplayFloating.getText());

		textInput.setText(
				"add fromToTaskTest2" +
						" from 11:59 pm " + getTodayDate() +
						" to 11:59 pm " + getTodayDate());
		buttonEnter.doClick();

		formattedUpcomingTime = LogicUtilities.getFormattedTime(getTodayDateForFormat("2359")).replaceAll(currentYear, "");
		assertEquals(
				"\nSuccessfully added to task 2.\n\tDeadline:" + formattedUpcomingTime + "\n",
				textDisplayMain.getText());
		assertEquals(
				"2: fromToTaskTest2" +
						"\n\tStart Time:" + formattedUpcomingTime +
						"\n\tEnd Time:" + formattedUpcomingTime + "\n\tNot done.",
						textDisplayUpcoming.getText());
		assertEquals("No tasks to display!", textDisplayFloating.getText());
	}
	
	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\junit\ui\GUIBehaviorTest.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\junit\ui\GUIVisualTest.java
	 */

package whatsupnext.junit.ui;

import static org.junit.Assert.*;

import java.awt.Dimension;
import java.awt.Window.Type;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import whatsupnext.logic.Logic;
import whatsupnext.storage.Storage;
import whatsupnext.ui.GUIOneWindow;
import whatsupnext.structure.enums.OPCODE;
import whatsupnext.structure.enums.Types.DELETETYPE;
import whatsupnext.structure.util.Task;

public class GUIVisualTest {
	private WhatsUpNextGUIStub gui;
	
	private class WhatsUpNextGUIStub extends GUIOneWindow {
		private Logic logic;
		
		public WhatsUpNextGUIStub(String fileName) {
			super(fileName);
			logic = new Logic(fileName);
		}
		
		public void clearFile() {
			Task delete = new Task();
			delete.setOpcode(OPCODE.DELETE);
			delete.setDeleteType(DELETETYPE.ALL);
			logic.executeTask(delete);
			
			Storage storage = Storage.getInstance();
			try {
				storage.clearFile();
				storage.deleteFileVersions();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	@Before
	public void setUpGUI() {
		gui = new WhatsUpNextGUIStub("guiTest");
	}
	
	@After
	public void clearTestFile() {
		gui.clearFile();
	}
	
	@Test
	public void FrameMainTest() {
		JFrame frameMain = (JFrame)GUITestUtils.getChildNamed(gui.getMainFrame(), "frameMain");
		assertNotNull("Can't acess the main frame JFrame", frameMain);
		
		assertTrue(frameMain.isResizable());
		
		Dimension prefSize = frameMain.getPreferredSize();
		assertEquals(780, prefSize.width);
		assertEquals(442, prefSize.height);
		Dimension minSize = frameMain.getMinimumSize();
		assertEquals(740, minSize.width);
		assertEquals(332, minSize.height);
		
		assertEquals("Cambria", frameMain.getFont().getName());
		assertTrue(frameMain.getFont().isBold());
		assertEquals(12, frameMain.getFont().getSize());
		
		assertEquals("WhatsUpNext", frameMain.getTitle());
		
		assertNotNull(frameMain.getContentPane().getLayout());
		assertEquals(Type.POPUP, frameMain.getType());
	}

	@Test
	public void WelcomeMessageTest() {
		JLabel labelWelcome = (JLabel)GUITestUtils.getChildNamed(gui.getMainFrame(), "labelWelcome");
		assertNotNull("Can't acess the text input JTextField", labelWelcome);
		
		DateFormat dateFormat = new SimpleDateFormat("EEE, yyyy-MM-dd");
		Calendar cal = Calendar.getInstance();
		
		assertEquals("Cambria", labelWelcome.getFont().getName());
		assertTrue(labelWelcome.getFont().isBold());
		assertEquals(13, labelWelcome.getFont().getSize());
		
		assertEquals("Welcome to WhatsUpNext! Today is " + dateFormat.format(cal.getTime()), labelWelcome.getText());
	}
	
	@Test
	public void UpcomingTasksTextDisplayTest() {
		JScrollPane textDisplayUpcomingScrollPane = (JScrollPane)GUITestUtils.getChildNamed(gui.getMainFrame(), "textDisplayUpcomingScrollPane");
		assertNotNull("Can't acess the upcoming task text display scrolling pane JScrollPane", textDisplayUpcomingScrollPane);
		
		assertEquals(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS, textDisplayUpcomingScrollPane.getVerticalScrollBarPolicy());
		
		JTextPane textDisplayUpcoming = (JTextPane)GUITestUtils.getChildNamed(gui.getMainFrame(), "textDisplayUpcoming");
		assertNotNull("Can't acess the upcoming task text area JTextArea", textDisplayUpcoming);
		
		assertEquals("Courier New", textDisplayUpcoming.getFont().getName());
		assertTrue(textDisplayUpcoming.getFont().isBold());
		assertEquals(12, textDisplayUpcoming.getFont().getSize());
		
		assertFalse(textDisplayUpcoming.isEditable());
	}
	
	@Test
	public void UpcomingTasksButtonTest() {
		JButton buttonUpcoming = (JButton)GUITestUtils.getChildNamed(gui.getMainFrame(), "buttonUpcoming");
		assertNotNull("Can't acess the upcoming task button JButton", buttonUpcoming);
		
		assertEquals("Cambria", buttonUpcoming.getFont().getName());
		assertTrue(buttonUpcoming.getFont().isBold());
		assertEquals(12, buttonUpcoming.getFont().getSize());
		
		assertEquals("Upcoming", buttonUpcoming.getText());
	}
	
	@Test
	public void MainEnterButtonTest() {
		JButton buttonEnter = (JButton)GUITestUtils.getChildNamed(gui.getMainFrame(), "buttonEnter");
		assertNotNull("Can't acess the main enter button JButton", buttonEnter);
		
		assertEquals("Cambria", buttonEnter.getFont().getName());
		assertTrue(buttonEnter.getFont().isBold());
		assertEquals(12, buttonEnter.getFont().getSize());
		
		assertEquals(" Enter ", buttonEnter.getText());
	}
	
	@Test
	public void MainUserCLITest() {
		JTextField textInput = (JTextField)GUITestUtils.getChildNamed(gui.getMainFrame(), "textInput");
		assertNotNull("Can't acess the user CLI JTextField", textInput);
		
		assertEquals("Courier New", textInput.getFont().getName());
		assertTrue(textInput.getFont().isPlain());
		assertEquals(12, textInput.getFont().getSize());
		
		assertEquals("", textInput.getText());
	}
	
	@Test
	public void MainTextDisplayTest() {
		JScrollPane textDisplayMainScrollPane = (JScrollPane)GUITestUtils.getChildNamed(gui.getMainFrame(), "textDisplayMainScrollPane");
		assertNotNull("Can't acess the main text display scrolling pane JScrollPane", textDisplayMainScrollPane);
		
		assertEquals(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS, textDisplayMainScrollPane.getVerticalScrollBarPolicy());
		
		JTextPane textDisplayMain = (JTextPane)GUITestUtils.getChildNamed(gui.getMainFrame(), "textDisplayMain");
		assertNotNull("Can't acess the main text display JTextField", textDisplayMain);
		
		assertFalse(textDisplayMain.isEditable());
		
		assertEquals("Courier New", textDisplayMain.getFont().getName());
		assertTrue(textDisplayMain.getFont().isBold());
		assertEquals(12, textDisplayMain.getFont().getSize());
		
		assertEquals("----Please enter command below:\n    type \"help\" for instructions\n", textDisplayMain.getText());
	}
}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\junit\ui\GUIVisualTest.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\structure\enums\Types.java
	 */

package whatsupnext.structure.enums;

public class Types {
	
	public enum ADDTYPE {
		FLOATING, DEADLINE, TIMEFRAME
	}
	
	public enum DELETETYPE {
		ALL, ID, DATE, DEADLINE, TIMEFRAME, DONE
	}
	
	public enum UPDATETYPE {
		DESCRIPTION, DEADLINE, TIMEFRAME 
	}
	
	public enum VIEWTYPE {
		ALL, NEXT, DATE, TIMEFRAME, UNDONE, FLOATING, OVERDUE
	}
	
	public enum FREETYPE {
		DATE, TIMEFRAME,
	}
}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\structure\enums\Types.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\structure\util\TaskComparators.java
	 */

package whatsupnext.structure.util;

import java.util.Comparator;

public class TaskComparators {

	private static boolean hasEmptyEndTime(Task task) {
		return task.getEndTime() == null || task.getEndTime().isEmpty();
	}

	public static class TaskDefaultComparator implements Comparator<Task> {
		@Override
		public int compare(Task taskA, Task taskB) {
			// Floating tasks get sorted alphabetically on description
			// Floating tasks get placed before deadline or time frame tasks
			if (hasEmptyEndTime(taskA) && hasEmptyEndTime(taskB)) {
				return taskA.getDescription().compareToIgnoreCase(taskB.getDescription());
			} else if (hasEmptyEndTime(taskA) && !hasEmptyEndTime(taskB)) {
				return -1;
			} else if (!hasEmptyEndTime(taskA) && hasEmptyEndTime(taskB)) {
				return 1;
			}

			// Other tasks get sorted by end time and alphabetically on description
			long taskAEndTime = Long.parseLong(taskA.getEndTime());
			long taskBEndTime = Long.parseLong(taskB.getEndTime());

			if (taskAEndTime < taskBEndTime) {
				return -1;
			} else if (taskAEndTime > taskBEndTime) {
				return 1;
			} else {
				return taskA.getDescription().compareToIgnoreCase(taskB.getDescription());
			}
		}
	}
	
}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\structure\util\TaskComparators.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\GUIAbstract.java
	 */

package whatsupnext.ui;

import whatsupnext.logic.Logic;

public abstract class GUIAbstract {
	
	protected static Logic logic;
	
	public abstract void reset();
	public abstract void showWindows();
	
	public static Logic getLogic() {
		return logic;
	}
}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\GUIAbstract.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\GUIOneWindow.java
	 */

package whatsupnext.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.Window.Type;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JFrame;
import javax.swing.JPanel;

import whatsupnext.logic.Logic;
import whatsupnext.ui.widgets.CommandLineInterfaceWidget;
import whatsupnext.ui.widgets.FloatingTasksWidget;
import whatsupnext.ui.widgets.MainDisplayWidget;
import whatsupnext.ui.widgets.ResetButtonWidget;
import whatsupnext.ui.widgets.UpcomingTasksWidget;

public class GUIOneWindow extends GUIAbstract{

	private JFrame frameMain;
	private final int FRAME_MAIN_WIDTH = 780;
	private final int FRAME_MAIN_HEIGHT = 442;
	
	private final int PANEL_MAIN_WIDTH = 350;
	private final int PANEL_MAIN_HEIGHT = 442;
	private final int PANEL_FLOATING_WIDTH = 350;
	private final int PANEL_FLOATING_HEIGHT = 221;
	private final int PANEL_UPCOMING_WIDTH = 350;
	private final int PANEL_UPCOMING_HEIGHT = 221;
	
	private JPanel mainPanel;
	private JPanel floatingPanel;
	private JPanel upcomingPanel;
	private JPanel resetPanel;
	private MainDisplayWidget mainDisplayWidget;
	private CommandLineInterfaceWidget cliWidget;
	private FloatingTasksWidget floatingWidget;
	private UpcomingTasksWidget upcomingWidget;
	private ResetButtonWidget resetWidget;
	
	
	public GUIOneWindow() {
		logic = new Logic();
		initGUIComponents();
		setComponentsNames();
		displayWidgetTasks();
	}
	
	public GUIOneWindow(String fileName) {
		logic = new Logic(fileName);
		initGUIComponents();
		setComponentsNames();
		displayWidgetTasks();
	}
	
	/**
	 * Returns the main frame used in the GUI
	 * 
	 * @return The JFrame for the main application
	 */
	public JFrame getMainFrame() {
		return frameMain;
	}

	public static Logic getLogic() {
		return logic;
	}
	
	public void showWindows() {
		frameMain.setLocationRelativeTo(null);
		frameMain.setVisible(true);
		frameMain.pack();
		
		cliWidget.requestFocus();
	}
	
	public void hideWindows() {
		frameMain.setVisible(false);
	}
	
	@Override
	public void reset() {
		frameMain.pack();
		displayWidgetTasks();
		
		cliWidget.requestFocus();
	}
	
	/**
	 * Names every component used in the GUI
	 */
	private void setComponentsNames() {
		frameMain.setName("frameMain");
	}
	
	private void displayWidgetTasks() {
		floatingWidget.clickFloating();
		upcomingWidget.clickUpcoming();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initGUIComponents() {
		initializeApplicationFrames();
		initializeWidgets();
		initializeWidgetPanels();
	}
	
	/**
	 * Initialize frame of the application
	 */
	private void initializeApplicationFrames() {
		createMainFrame();
	}
	
	private void createMainFrame() {
		frameMain = new JFrame();
		frameMain.setResizable(true);
		frameMain.setIconImage(Toolkit.getDefaultToolkit().getImage(GUIOneWindow.class.getResource("/whatsupnext/ui/iconGUI.png")));
		frameMain.setType(Type.POPUP);
		frameMain.setFont(new Font("Cambria", Font.BOLD, 12));
		frameMain.getContentPane().setBackground(new Color(204, 224, 250));
		frameMain.setTitle("WhatsUpNext");
		frameMain.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frameMain.setPreferredSize(new Dimension(FRAME_MAIN_WIDTH, FRAME_MAIN_HEIGHT));
		frameMain.setMinimumSize(new Dimension(FRAME_MAIN_WIDTH - 40, FRAME_MAIN_HEIGHT - 110));
		
		GridBagLayout gbl_mainFrame = new GridBagLayout();
		gbl_mainFrame.columnWidths = new int[]{400, 300, 15};
		gbl_mainFrame.rowHeights = new int[]{15, 235, 235};
		gbl_mainFrame.columnWeights = new double[]{0.5, 0.5, 0.0};
		gbl_mainFrame.rowWeights = new double[]{0.0, 0.5, 0.5};
		frameMain.getContentPane().setLayout(gbl_mainFrame);
		
		frameMain.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				deleteRevisions();
			}
		});
	}
	
	private void initializeWidgets() {
		mainDisplayWidget = new MainDisplayWidget();
		floatingWidget = new FloatingTasksWidget();
		upcomingWidget = new UpcomingTasksWidget();
		
		cliWidget = new CommandLineInterfaceWidget(mainDisplayWidget);
		cliWidget.linkToWidget(floatingWidget);
		cliWidget.linkToWidget(upcomingWidget);
		
		resetWidget = new ResetButtonWidget(this);
	}
	

	private void initializeWidgetPanels() {
		initializeMainPanel();
		initializeFloatingPanel();
		initializeUpcomingPanel();
		initializeResetPanel();
	}
	
	private void initializeMainPanel() {
		mainPanel = new JPanel();
		mainPanel.setBackground(new Color(204, 224, 250));
		mainPanel.setPreferredSize(new Dimension(PANEL_MAIN_WIDTH, PANEL_MAIN_HEIGHT));
		mainPanel.setMinimumSize(new Dimension(PANEL_MAIN_WIDTH, PANEL_MAIN_HEIGHT));
		
		GridBagLayout gbl_mainPanel = new GridBagLayout();
		gbl_mainPanel.columnWidths = new int[]{400};
		gbl_mainPanel.rowHeights = new int[]{235};
		gbl_mainPanel.columnWeights = new double[]{1.0};
		gbl_mainPanel.rowWeights = new double[]{1.0};
		mainPanel.setLayout(gbl_mainPanel);
		
		GridBagConstraints gbc_mainDisplayWidget = new GridBagConstraints();
		gbc_mainDisplayWidget.fill = GridBagConstraints.BOTH;
		gbc_mainDisplayWidget.anchor = GridBagConstraints.CENTER;
		gbc_mainDisplayWidget.insets = new Insets(0, 0, 5, 0);
		gbc_mainDisplayWidget.gridx = 0;
		gbc_mainDisplayWidget.gridy = 0;
		mainPanel.add(mainDisplayWidget.getWidgetPanel(), gbc_mainDisplayWidget);
		
		GridBagConstraints gbc_cliWidget = new GridBagConstraints();
		gbc_cliWidget.fill = GridBagConstraints.HORIZONTAL;
		gbc_cliWidget.anchor = GridBagConstraints.CENTER;
		gbc_cliWidget.insets = new Insets(0, 0, 0, 0);
		gbc_cliWidget.gridx = 0;
		gbc_cliWidget.gridy = 1;
		mainPanel.add(cliWidget.getWidgetPanel(), gbc_cliWidget);
		
		GridBagConstraints gbc_mainPanel = new GridBagConstraints();
		gbc_mainPanel.fill = GridBagConstraints.BOTH;
		gbc_mainPanel.anchor = GridBagConstraints.CENTER;
		gbc_mainPanel.insets = new Insets(0, 15, 15, 15);
		gbc_mainPanel.gridx = 0;
		gbc_mainPanel.gridy = 1;
		gbc_mainPanel.gridheight = 2;
		frameMain.getContentPane().add(mainPanel, gbc_mainPanel);
	}
	
	private void initializeFloatingPanel() {
		floatingPanel = new JPanel();
		floatingPanel.setBackground(new Color(204, 224, 250));
		floatingPanel.setPreferredSize(new Dimension(PANEL_FLOATING_WIDTH, PANEL_FLOATING_HEIGHT));
		floatingPanel.setMinimumSize(new Dimension(PANEL_FLOATING_WIDTH, PANEL_FLOATING_HEIGHT));
		
		GridBagLayout gbl_floatingPanel = new GridBagLayout();
		gbl_floatingPanel.columnWidths = new int[]{300};
		gbl_floatingPanel.rowHeights = new int[]{235};
		gbl_floatingPanel.columnWeights = new double[]{1.0};
		gbl_floatingPanel.rowWeights = new double[]{1.0};
		floatingPanel.setLayout(gbl_floatingPanel);
		
		GridBagConstraints gbc_floatingWidget = new GridBagConstraints();
		gbc_floatingWidget.fill = GridBagConstraints.BOTH;
		gbc_floatingWidget.anchor = GridBagConstraints.CENTER;
		gbc_floatingWidget.insets = new Insets(0, 0, 0, 0);
		gbc_floatingWidget.gridx = 0;
		gbc_floatingWidget.gridy = 0;
		floatingPanel.add(floatingWidget.getWidgetPanel(), gbc_floatingWidget);
		
		GridBagConstraints gbc_floatingPanel = new GridBagConstraints();
		gbc_floatingPanel.fill = GridBagConstraints.BOTH;
		gbc_floatingPanel.anchor = GridBagConstraints.CENTER;
		gbc_floatingPanel.insets = new Insets(0, 0, 15, 0);
		gbc_floatingPanel.gridx = 1;
		gbc_floatingPanel.gridy = 1;
		frameMain.getContentPane().add(floatingPanel, gbc_floatingPanel);
	}
	
	private void initializeUpcomingPanel() {
		upcomingPanel = new JPanel();
		upcomingPanel.setBackground(new Color(204, 224, 250));
		upcomingPanel.setPreferredSize(new Dimension(PANEL_UPCOMING_WIDTH, PANEL_UPCOMING_HEIGHT));
		upcomingPanel.setMinimumSize(new Dimension(PANEL_UPCOMING_WIDTH, PANEL_UPCOMING_HEIGHT));
		
		GridBagLayout gbl_upcomingPanel = new GridBagLayout();
		gbl_upcomingPanel.columnWidths = new int[]{350};
		gbl_upcomingPanel.rowHeights = new int[]{235};
		gbl_upcomingPanel.columnWeights = new double[]{1.0};
		gbl_upcomingPanel.rowWeights = new double[]{1.0};
		upcomingPanel.setLayout(gbl_upcomingPanel);
		
		GridBagConstraints gbc_upcomingWidget = new GridBagConstraints();
		gbc_upcomingWidget.fill = GridBagConstraints.BOTH;
		gbc_upcomingWidget.anchor = GridBagConstraints.CENTER;
		gbc_upcomingWidget.insets = new Insets(0, 0, 0, 0);
		gbc_upcomingWidget.gridx = 0;
		gbc_upcomingWidget.gridy = 0;
		upcomingPanel.add(upcomingWidget.getWidgetPanel(), gbc_upcomingWidget);
		
		GridBagConstraints gbc_upcomingPanel = new GridBagConstraints();
		gbc_upcomingPanel.fill = GridBagConstraints.BOTH;
		gbc_upcomingPanel.anchor = GridBagConstraints.CENTER;
		gbc_upcomingPanel.insets = new Insets(0, 0, 15, 0);
		gbc_upcomingPanel.gridx = 1;
		gbc_upcomingPanel.gridy = 2;
		frameMain.getContentPane().add(upcomingPanel, gbc_upcomingPanel);
	}
	
	private void initializeResetPanel() {
		resetPanel = new JPanel();
		resetPanel.setBackground(new Color(204, 224, 250));
		resetPanel.setPreferredSize(new Dimension(28, 28));
		resetPanel.setMinimumSize(new Dimension(28, 28));
		
		GridBagLayout gbl_resetPanel = new GridBagLayout();
		gbl_resetPanel.columnWidths = new int[]{28};
		gbl_resetPanel.rowHeights = new int[]{28};
		gbl_resetPanel.columnWeights = new double[]{1.0};
		gbl_resetPanel.rowWeights = new double[]{1.0};
		resetPanel.setLayout(gbl_resetPanel);
		
		GridBagConstraints gbc_resetWidget = new GridBagConstraints();
		gbc_resetWidget.fill = GridBagConstraints.BOTH;
		gbc_resetWidget.anchor = GridBagConstraints.CENTER;
		gbc_resetWidget.insets = new Insets(0, 0, 0, 0);
		gbc_resetWidget.gridx = 0;
		gbc_resetWidget.gridy = 0;
		resetPanel.add(resetWidget.getWidgetPanel(), gbc_resetWidget);
		
		GridBagConstraints gbc_resetPanel = new GridBagConstraints();
		gbc_resetPanel.anchor = GridBagConstraints.NORTHEAST;
		gbc_resetPanel.insets = new Insets(0, 0, 0, 15);
		gbc_resetPanel.gridx = 0;
		gbc_resetPanel.gridy = 1;
		frameMain.getContentPane().add(resetPanel, gbc_resetPanel, 0);
	}
	
	private void deleteRevisions() {
		getLogic().clearRevisionFiles();
	}

}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\GUIOneWindow.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\WhatsUpNextMain.java
	 */

package whatsupnext.ui;

import java.awt.EventQueue;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GraphicsDevice.WindowTranslucency;

import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;

public class WhatsUpNextMain {
	
	static boolean isPerPixelTranslucencySupported;
	
	
	/**
	 * Launch the application.
	 * Sets window visibility and size.
	 */
	public static void main(String[] args) {
		// Determine what the GraphicsDevice can support.
		GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
		GraphicsDevice gd = ge.getDefaultScreenDevice();
		isPerPixelTranslucencySupported = 
				gd.isWindowTranslucencySupported(WindowTranslucency.PERPIXEL_TRANSLUCENT);

		try {
		    for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
		        if ("Nimbus".equals(info.getName())) {
		            UIManager.setLookAndFeel(info.getClassName());
		            break;
		        }
		    }
		} catch (Exception e) {
			JFrame.setDefaultLookAndFeelDecorated(true);
		}
		
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					GUIAbstract gui = new GUIOneWindow();
					gui.showWindows();
					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\WhatsUpNextMain.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\widgets\CommandLineInterfaceWidget.java
	 */

package whatsupnext.ui.widgets;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.ListIterator;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import whatsupnext.parser.api.Parser;
import whatsupnext.structure.enums.OPCODE;
import whatsupnext.structure.util.Task;
import whatsupnext.ui.GUIAbstract;

public class CommandLineInterfaceWidget {

	private MainDisplayWidget linkedDisplay;
	private ArrayList<TasksWidget> linkedOptionalDisplays;

	private JPanel widgetPanel;
	private JTextField textInput;
	private JButton buttonEnter;

	private final ArrayList<String> STRINGS_CLEAR = new ArrayList<String>(Arrays.asList("clear", "Clear", "CLEAR", "clc"));
	private final LinkedList<String> usedCommands = new LinkedList<String>();
	private ListIterator<String> commandIterator;
	private boolean upLastPressed;
	private boolean downLastPressed;


	public CommandLineInterfaceWidget(MainDisplayWidget displayForCLI) {
		linkedDisplay = displayForCLI;
		initializeCLIPanel();
		setComponentNames();
		linkedOptionalDisplays = new ArrayList<TasksWidget>();
		
		commandIterator = usedCommands.listIterator();
		upLastPressed = false;
		downLastPressed = false;
	}
	
	public void linkToWidget(TasksWidget widget) {
		linkedOptionalDisplays.add(widget);
	}
	
	public JPanel getWidgetPanel() {
    	return widgetPanel;
    }

	private void setComponentNames() {
		widgetPanel.setName("commandLineInterfaceWidgetPanel");
		textInput.setName("textInput");
		buttonEnter.setName("buttonEnter");
	}

	private void initializeCLIPanel() {
		widgetPanel = new JPanel();
		widgetPanel.setBackground(new Color(204, 224, 250));
		
		GridBagLayout gbl_widgetPanel = new GridBagLayout();
		gbl_widgetPanel.columnWeights = new double[]{1.0, 0.0};
		gbl_widgetPanel.rowWeights = new double[]{1.0};
		widgetPanel.setLayout(gbl_widgetPanel);
		
		initializeMainEnterButton();
		initializeMainUserCLI();
	}

	private void initializeMainEnterButton() {
		buttonEnter = new JButton(" Enter ");
		buttonEnter.setFont(new Font("Cambria", Font.BOLD, 12));
		buttonEnter.setForeground(new Color(224, 255, 255));
		buttonEnter.setBackground(new Color(70, 130, 180));
		buttonEnter.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clickEnter();
			}
		});
		
		GridBagConstraints gbc_buttonEnter = new GridBagConstraints();
		gbc_buttonEnter.fill = GridBagConstraints.HORIZONTAL;
		gbc_buttonEnter.anchor = GridBagConstraints.WEST;
		gbc_buttonEnter.gridx = 1;
		gbc_buttonEnter.gridy = 0;
		
		widgetPanel.add(buttonEnter, gbc_buttonEnter);
	}

	private void initializeMainUserCLI() {
		textInput = new JTextField();
		textInput.setBackground(new Color(240, 255, 255));
		textInput.setFont(new Font("Courier New", Font.PLAIN, 12));
		
		GridBagConstraints gbc_textInput = new GridBagConstraints();
		gbc_textInput.fill = GridBagConstraints.HORIZONTAL;
		gbc_textInput.anchor = GridBagConstraints.WEST;
		gbc_textInput.insets = new Insets(0, 0, 0, 5);
		gbc_textInput.gridx = 0;
		gbc_textInput.gridy = 0;
		
		widgetPanel.add(textInput, gbc_textInput);

		// Pressing 'enter' key causes the command to be executed
		textInput.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				pressEnterFromCLI();
			}	
		});

		// Pressing 'up' or 'down' keys allows for cycling of previous commands to replace user input
		textInput.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				int key = e.getKeyCode();
				if (key == KeyEvent.VK_UP) {
					pressUpFromCLI();
				} else if (key == KeyEvent.VK_DOWN) {
					pressDownFromCLI();
				}
			}

			@Override
			public void keyTyped(KeyEvent e) {
				pressKeyFromCLI();
			}
		});
	}

	/**
	 * This method is activated as 'input command'
	 * It is called whenever user clicks the input button or presses the enter key
	 */
	private void clickEnter(){
		String commandInput = textInput.getText();
		String feedback;

		if (commandIsClear(commandInput)) {
			usedCommands.addFirst(commandInput);
			clearLinkedDisplay();

		} else {
			if (commandInput.trim().isEmpty()) {
				feedback = "Empty command";
			} else {
				try {
					usedCommands.addFirst(commandInput);
					Parser parser = new Parser(commandInput);
					Task currentTask = parser.parseInput();
					
					if (currentTask.getOpCode() == OPCODE.EXIT) {
						Window frame = findWindow(widgetPanel);
						frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
						frame.dispose();
					}
					if (currentTask.getOpCode() == OPCODE.HELP) {
						feedback = currentTask.getHelpMessage();
					} else {
						feedback = GUIAbstract.getLogic().executeTask(currentTask);
					}
				} catch (Exception e) {
					feedback = e.getMessage();
				}
			}
			linkedDisplay.displayFeedback(feedback);
			for (TasksWidget widget : linkedOptionalDisplays) {
				widget.doActionOnClick();
			}
		}
		clearTextInput();
	}

	/**
	 * pressUp and pressDown must check if the opposite key was pressed
	 * because the pointer must move twice if so
	 */
	private void pressUpFromCLI() {
		upLastPressed = true;
		if (commandIterator.hasNext()) {
			textInput.setText(commandIterator.next());
		}
		if (downLastPressed) {
			textInput.setText(commandIterator.next());
			downLastPressed = false;
		}
	}

	private void pressDownFromCLI() {
		downLastPressed = true;
		if (commandIterator.hasPrevious()) {
			textInput.setText(commandIterator.previous());
		}
		if (upLastPressed) {
			textInput.setText(commandIterator.previous());
			upLastPressed = false;
		}
	}
	
	private boolean commandIsClear(String commandInput) {
		for (String stringClear : STRINGS_CLEAR) {
			if (stringClear.equals(commandInput.trim())){
				return true;
			}
		}
		return false;
	}

	/**
	 * Clears the user command prompt
	 */
	private void clearTextInput() {
		textInput.setText("");
	}

	/**
	 * Clears the main display area
	 */
	private void clearLinkedDisplay() {
		linkedDisplay.setText(linkedDisplay.getDefaultMessage());
	}

	private void pressEnterFromCLI() {
		clickEnter();
		pressKeyFromCLI();
	}

	private void pressKeyFromCLI() {
		commandIterator = usedCommands.listIterator();
	}
	
	private Window findWindow(Component c) {
		if (c == null) {
			return JOptionPane.getRootFrame();
		} else if (c instanceof Window) {
			return (Window) c;
		} else {
			return findWindow(c.getParent());
		}
	}

	public void requestFocus() {
		textInput.requestFocus();
	}
}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\widgets\CommandLineInterfaceWidget.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\widgets\FloatingTasksWidget.java
	 */

package whatsupnext.ui.widgets;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

import whatsupnext.structure.enums.OPCODE;
import whatsupnext.structure.enums.Types.VIEWTYPE;
import whatsupnext.structure.util.Task;
import whatsupnext.ui.GUIAbstract;

public class FloatingTasksWidget implements TasksWidget {
	private JPanel widgetPanel;
	private JButton buttonFloating;
	private JScrollPane textDisplayFloatingScrollPane;
	private JTextPane textDisplayFloating;
	
	private Random random = new Random();
	private int currentColorIndex;
	private Color[] colors = {new Color(153,0,76),new Color(102,102,0),
			                  new Color(210,105,30)};
	private Color titleBackground = new Color(255,251,180);
	private Color titleForeground = new Color(102,0,0);

	private StyledDocument  doc = new DefaultStyledDocument();
	
	
	public FloatingTasksWidget() {
		initializeFloatingTasksPanel();
		setComponentNames();
	}
	
	@Override
	public void doActionOnClick() {
		clickFloating();
	}
	
	public JPanel getWidgetPanel() {
    	return widgetPanel;
    }
	
	private void setComponentNames() {
		widgetPanel.setName("floatingTasksWidgetPanel");
		buttonFloating.setName("buttonFloating");
		textDisplayFloatingScrollPane.setName("textDisplayFloatingScrollPane");
		textDisplayFloating.setName("textDisplayFloating");
	}

	private void initializeFloatingTasksPanel() {
		widgetPanel = new JPanel();
		widgetPanel.setBackground(new Color(204, 224, 250));
		
		GridBagLayout gbl_widgetPanel = new GridBagLayout();
		gbl_widgetPanel.columnWeights = new double[]{1.0};
		gbl_widgetPanel.rowWeights = new double[]{0.0, 1.0};
		widgetPanel.setLayout(gbl_widgetPanel);
		
		initializeFloatingTasksTextDisplay();
		initializeFloatingTasksButton();
	}
	
	private void initializeFloatingTasksTextDisplay() {
		textDisplayFloating = new JTextPane(doc);
		textDisplayFloating.setFont(new Font("Courier New", Font.BOLD, 12));
		textDisplayFloating.setForeground(new Color(25, 25, 112));
		textDisplayFloating.setEditable(false);
		textDisplayFloating.setBackground(new Color(240, 255, 255));
		
		textDisplayFloatingScrollPane = new JScrollPane(textDisplayFloating);
		textDisplayFloatingScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		
		GridBagConstraints gbc_textDisplayUpcomingScrollPane = new GridBagConstraints();
		gbc_textDisplayUpcomingScrollPane.fill = GridBagConstraints.BOTH;
		gbc_textDisplayUpcomingScrollPane.anchor = GridBagConstraints.NORTHWEST;
		gbc_textDisplayUpcomingScrollPane.gridx = 0;
		gbc_textDisplayUpcomingScrollPane.gridy = 1;
		gbc_textDisplayUpcomingScrollPane.gridwidth = 2;
		
		widgetPanel.add(textDisplayFloatingScrollPane, gbc_textDisplayUpcomingScrollPane);
	}
	
	private void initializeFloatingTasksButton() {
		buttonFloating = new JButton("Floating Tasks");
		buttonFloating.setFont(new Font("Cambria", Font.BOLD, 12));
		buttonFloating.setForeground(new Color(224, 255, 255));
		buttonFloating.setBackground(new Color(70, 130, 180));
		buttonFloating.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clickFloating();
			}
		});
		
		GridBagConstraints gbc_buttonUpcoming = new GridBagConstraints();
		gbc_buttonUpcoming.fill = GridBagConstraints.HORIZONTAL;
		gbc_buttonUpcoming.anchor = GridBagConstraints.WEST;
		gbc_buttonUpcoming.insets = new Insets(0, 0, 2, 0);
		gbc_buttonUpcoming.gridx = 0;
		gbc_buttonUpcoming.gridy = 0;
		
		widgetPanel.add(buttonFloating, gbc_buttonUpcoming);
	}
	
	public void clickFloating() {
		Task task = generateTaskForFloating();
		
		String feedback;
		try {
			feedback = GUIAbstract.getLogic().executeTask(task);
		} catch (Exception e) {
			feedback = e.getMessage();
		}
		
		displayFloatingFeedback(feedback);
	}
	
	private void displayFloatingFeedback(String feedback) {
		appendToPane(feedback);
	}
	
	private Task generateTaskForFloating() {
		Task task = new Task();
		task.setOpcode(OPCODE.VIEW);
		task.setViewType(VIEWTYPE.FLOATING);
		return task;
	}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\widgets\FloatingTasksWidget.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\widgets\MainDisplayWidget.java
	 */

package whatsupnext.ui.widgets;

import java.awt.Color;
import java.awt.Font;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Random;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;

public class MainDisplayWidget {
	
	private JPanel widgetPanel;
    private String STRING_WELCOME = "Welcome to WhatsUpNext! Today is ";
    private final String DEFAULT_MESSAGE = "----Please enter command below:\n    type \"help\" for instructions\n";
    private JLabel labelWelcome;
	private JScrollPane textDisplayMainScrollPane;
	private JTextPane textDisplayMain;
	
	private String currentYear;
	
	private Random random = new Random();
	private int currentColorIndex;
	private Color[] colors = {
			new Color(153, 0, 76),
			new Color(102, 102, 0),
			new Color(0, 128, 128), 
			new Color(220, 20, 60),
			new Color(210, 105, 30)
	};
	private Color titleBackground = new Color(230,230,250);
	private Color titleForeground = new Color(25,25,112);

	private StyledDocument  doc = new DefaultStyledDocument();
	

    public MainDisplayWidget() {
    	initializeCurrentYear();
		initializeMainDisplayPanel();
		setComponentNames();
	}
    
    public JPanel getWidgetPanel() {
    	return widgetPanel;
    }
    
    public String getDefaultMessage() {
    	return DEFAULT_MESSAGE;
    }
    
    public void setText(String string) {
		textDisplayMain.setText(DEFAULT_MESSAGE);
	}

	public void displayFeedback(String feedback) {
		feedback = feedback.replaceAll(" " + currentYear, "");
		feedback = feedback.replaceAll(currentYear + " ", "");
		feedback = feedback.replaceAll(currentYear, "");
		appendToPane(feedback);
	}
	
    
    private void initializeCurrentYear() {
    	DateFormat dateFormat = new SimpleDateFormat("yyyy");
		Calendar cal = Calendar.getInstance();
		currentYear = dateFormat.format(cal.getTime());
	}

	private void setComponentNames() {
		widgetPanel.setName("mainDisplayWidgetPanel");
    	labelWelcome.setName("labelWelcome");
		textDisplayMain.setName("textDisplayMain");
		textDisplayMainScrollPane.setName("textDisplayMainScrollPane");
    }

	private void initializeMainDisplayPanel() {
		widgetPanel = new JPanel();
		widgetPanel.setBackground(new Color(204, 224, 250));
		
		GridBagLayout gbl_widgetPanel = new GridBagLayout();
		gbl_widgetPanel.columnWeights = new double[]{1.0};
		gbl_widgetPanel.rowWeights = new double[]{0.0, 1.0};
		widgetPanel.setLayout(gbl_widgetPanel);
		
		initializeWelcomeMessage();
		initializeMainTextDisplay();
	}
	
	private void initializeWelcomeMessage() {
		appendDateToWelcomeMessage();
		initializeWelcomeMessageLabel();
	}

	/**
	 * Gets the current date and completes the welcome message
	 */
	private void appendDateToWelcomeMessage() {
		DateFormat dateFormat = new SimpleDateFormat("EEE, yyyy-MM-dd");
		Calendar cal = Calendar.getInstance();
		STRING_WELCOME = STRING_WELCOME + dateFormat.format(cal.getTime());
	}

	private void initializeWelcomeMessageLabel() {
		labelWelcome = new JLabel(STRING_WELCOME);
		labelWelcome.setForeground(new Color(0, 0, 128));
		labelWelcome.setFont(new Font("Cambria", Font.BOLD, 13));
		
		GridBagConstraints gbc_labelWelcome = new GridBagConstraints();
		gbc_labelWelcome.fill = GridBagConstraints.HORIZONTAL;
		gbc_labelWelcome.anchor = GridBagConstraints.NORTHWEST;
		gbc_labelWelcome.insets = new Insets(5, 0, 5, 0);
		gbc_labelWelcome.gridx = 0;
		gbc_labelWelcome.gridy = 0;
		
		widgetPanel.add(labelWelcome, gbc_labelWelcome);
	}
	
	private void initializeMainTextDisplay() {
		doc = new DefaultStyledDocument();
		textDisplayMain = new JTextPane(doc);
		textDisplayMain.setFont(new Font("Courier New", Font.BOLD, 12));
		textDisplayMain.setForeground(new Color(25, 25, 112));
		textDisplayMain.setText(DEFAULT_MESSAGE);
		textDisplayMain.setEditable(false);
		textDisplayMain.setBackground(new Color(240, 255, 255));
		
		textDisplayMainScrollPane = new JScrollPane(textDisplayMain);
		textDisplayMainScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		
		GridBagConstraints gbc_textDisplayMainScrollPane = new GridBagConstraints();
		gbc_textDisplayMainScrollPane.fill = GridBagConstraints.BOTH;
		gbc_textDisplayMainScrollPane.anchor = GridBagConstraints.NORTHWEST;
		gbc_textDisplayMainScrollPane.insets = new Insets(3, 0, 0, 0);
		gbc_textDisplayMainScrollPane.gridx = 0;
		gbc_textDisplayMainScrollPane.gridy = 1;
		
		widgetPanel.add(textDisplayMainScrollPane, gbc_textDisplayMainScrollPane);
	}
	
	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\widgets\MainDisplayWidget.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\widgets\ResetButtonWidget.java
	 */

package whatsupnext.ui.widgets;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;

import whatsupnext.ui.GUIAbstract;
import whatsupnext.ui.GUIOneWindow;

public class ResetButtonWidget {

	JPanel widgetPanel;
	JButton buttonReset;
	GUIAbstract linkedGui;
	
	
	public ResetButtonWidget(GUIAbstract gui) {
		linkedGui = gui;
		initializeResetButtonPanel();
		setComponentNames();
	}
	
	public JPanel getWidgetPanel() {
    	return widgetPanel;
    }
	
	private void setComponentNames() {
		widgetPanel.setName("resetButtonWidgetPanel");
		buttonReset.setName("buttonReset");
	}

	private void initializeResetButtonPanel() {
		widgetPanel = new JPanel();
		widgetPanel.setBackground(new Color(204, 224, 250));
		
		GridBagLayout gbl_widgetPanel = new GridBagLayout();
		gbl_widgetPanel.columnWeights = new double[]{1.0};
		gbl_widgetPanel.rowWeights = new double[]{1.0};
		widgetPanel.setLayout(gbl_widgetPanel);
		
		initializeResetButton();
	}

	private void initializeResetButton() {
		Image img = Toolkit.getDefaultToolkit().getImage(GUIOneWindow.class.getResource("/whatsupnext/ui/resetIcon.png"));
		buttonReset = new JButton(new ImageIcon(img));
		buttonReset.setToolTipText("Reset to default size");
		buttonReset.setBackground(new Color(255, 117, 56));
		buttonReset.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clickReset();
			}
		});
		
		GridBagConstraints gbc_resetButton = new GridBagConstraints();
		gbc_resetButton.fill = GridBagConstraints.BOTH;
		gbc_resetButton.anchor = GridBagConstraints.CENTER;
		gbc_resetButton.insets = new Insets(0, 0, 0, 0);
		gbc_resetButton.gridx = 0;
		gbc_resetButton.gridy = 0;
		
		widgetPanel.add(buttonReset, gbc_resetButton);
	}
	
	private void clickReset() {
		linkedGui.reset();
	}
	
}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\widgets\ResetButtonWidget.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\widgets\TasksWidget.java
	 */

package whatsupnext.ui.widgets;

public interface TasksWidget {
	public void doActionOnClick();
}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\widgets\TasksWidget.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\widgets\UpcomingTasksWidget.java
	 */

package whatsupnext.ui.widgets;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

import whatsupnext.parser.extractor.ParseDate;
import whatsupnext.structure.enums.OPCODE;
import whatsupnext.structure.enums.Types.VIEWTYPE;
import whatsupnext.structure.util.Task;
import whatsupnext.ui.GUIAbstract;

public class UpcomingTasksWidget implements TasksWidget{

	private JPanel widgetPanel;

	private final String[] timeOptions = {"1 day", "2 days", "3 days", "4 days", "5 days", "6 days", "1 week", "2 weeks", "3 weeks", "1 month"};
	private String selectedTimeOption;
	private JComboBox<String> timeLengthCombobox;
	private JButton buttonUpcoming;
	
	private JScrollPane textDisplayUpcomingScrollPane;
	private JTextPane textDisplayUpcoming;
	
	private String currentYear;
	
	private Random random = new Random();
	private int currentColorIndex;
	private Color[] colors = {new Color(220,20,60),new Color(184,134,11),
                              new Color(139,0,139),new Color(188,143,143)};
	private Color titleBackground = new Color(240,255,240);
	private Color titleForeground = new Color(46,139,87);

	private StyledDocument doc = new DefaultStyledDocument();
	
	
	public UpcomingTasksWidget() {
		initializeCurrentYear();
		selectedTimeOption = timeOptions[0];
		initializeUpcomingTasksPanel();
		setComponentNames();
	}
	
	@Override
	public void doActionOnClick() {
		clickUpcoming();
	}
	
	public JPanel getWidgetPanel() {
    	return widgetPanel;
    }
	
	private void initializeCurrentYear() {
    	DateFormat dateFormat = new SimpleDateFormat("yyyy");
		Calendar cal = Calendar.getInstance();
		currentYear = dateFormat.format(cal.getTime());
	}
	
	private void setComponentNames() {
		widgetPanel.setName("upcomingTasksWidgetPanel");
		buttonUpcoming.setName("buttonUpcoming");
		timeLengthCombobox.setName("timeLengthCombobox");
		textDisplayUpcomingScrollPane.setName("textDisplayUpcomingScrollPane");
		textDisplayUpcoming.setName("textDisplayUpcoming");
	}

	private void initializeUpcomingTasksPanel() {
		widgetPanel = new JPanel();
		widgetPanel.setBackground(new Color(204, 224, 250));
		
		GridBagLayout gbl_widgetPanel = new GridBagLayout();
		gbl_widgetPanel.columnWeights = new double[]{0.9, 0.1};
		gbl_widgetPanel.rowWeights = new double[]{0.0, 1.0};
		widgetPanel.setLayout(gbl_widgetPanel);
		
		initializeUpcomingTasksTextDisplay();
		initializeUpcomingTasksSelector();
	}
	
	private void initializeUpcomingTasksTextDisplay() {
		textDisplayUpcoming = new JTextPane(doc);
		textDisplayUpcoming.setFont(new Font("Courier New", Font.BOLD, 12));
		textDisplayUpcoming.setForeground(new Color(25, 25, 112));
		textDisplayUpcoming.setEditable(false);
		textDisplayUpcoming.setBackground(new Color(240, 255, 255));
		
		textDisplayUpcomingScrollPane = new JScrollPane(textDisplayUpcoming);
		textDisplayUpcomingScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		
		GridBagConstraints gbc_textDisplayUpcomingScrollPane = new GridBagConstraints();
		gbc_textDisplayUpcomingScrollPane.fill = GridBagConstraints.BOTH;
		gbc_textDisplayUpcomingScrollPane.anchor = GridBagConstraints.NORTHWEST;
		gbc_textDisplayUpcomingScrollPane.gridx = 0;
		gbc_textDisplayUpcomingScrollPane.gridy = 1;
		gbc_textDisplayUpcomingScrollPane.gridwidth = 2;
		
		widgetPanel.add(textDisplayUpcomingScrollPane, gbc_textDisplayUpcomingScrollPane);
	}
	
	private void initializeUpcomingTasksSelector() {
		createUpcomingButton();
		createTimeLengthCombobox();
	}
	
	private void createUpcomingButton() {
		buttonUpcoming = new JButton("Upcoming");
		buttonUpcoming.setFont(new Font("Cambria", Font.BOLD, 12));
		buttonUpcoming.setForeground(new Color(224, 255, 255));
		buttonUpcoming.setBackground(new Color(70, 130, 180));
		buttonUpcoming.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clickUpcoming();
			}
		});
		
		GridBagConstraints gbc_buttonUpcoming = new GridBagConstraints();
		gbc_buttonUpcoming.fill = GridBagConstraints.BOTH;
		gbc_buttonUpcoming.anchor = GridBagConstraints.WEST;
		gbc_buttonUpcoming.insets = new Insets(0, 0, 2, 0);
		gbc_buttonUpcoming.gridx = 0;
		gbc_buttonUpcoming.gridy = 0;
		
		widgetPanel.add(buttonUpcoming, gbc_buttonUpcoming);
	}

	private void createTimeLengthCombobox() {
		timeLengthCombobox = new JComboBox<String>(timeOptions);
		timeLengthCombobox.setSelectedIndex(0);
		timeLengthCombobox.setFont(new Font("Cambria", Font.PLAIN, 12));
		timeLengthCombobox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				@SuppressWarnings("unchecked")
				JComboBox<String> cb = (JComboBox<String>)e.getSource();
		        selectedTimeOption = (String)cb.getSelectedItem();
		        clickUpcoming();
			}
		});
		
		GridBagConstraints gbc_timeLengthCombobox = new GridBagConstraints();
		gbc_timeLengthCombobox.fill = GridBagConstraints.BOTH;
		gbc_timeLengthCombobox.anchor = GridBagConstraints.EAST;
		gbc_timeLengthCombobox.insets = new Insets(0, 0, 2, 0);
		gbc_timeLengthCombobox.gridx = 1;
		gbc_timeLengthCombobox.gridy = 0;
		
		widgetPanel.add(timeLengthCombobox, gbc_timeLengthCombobox);
	}

	private void displayUpcomingFeedback(String feedback) {
		feedback = feedback.replaceAll(" " + currentYear, "");
		feedback = feedback.replaceAll(currentYear + " ", "");
		feedback = feedback.replaceAll(currentYear, "");
		appendToPane(feedback);
	}
	
	public void clickUpcoming() {
		// Get a list of most recent tasks and display
		Task task = generateTaskForUpcoming(selectedTimeOption);
		
		String feedback;
		try {
			feedback = GUIAbstract.getLogic().executeTask(task);
		} catch (Exception e) {
			feedback = e.getMessage();
		}
		
		displayUpcomingFeedback(feedback);
	}

	/**
	 *  view all tasks within today
	 * @return	the task that holds the view time frame task for upcoming
	 */
	private Task generateTaskForUpcoming(String timeOption) {
		ParseDate parseDate = new ParseDate();
		Task task = new Task();
		task.setOpcode(OPCODE.VIEW);
		task.setViewType(VIEWTYPE.TIMEFRAME);
		task.setStartTime(parseDate.getTodayDate() + "0000");
		
		Calendar cal = Calendar.getInstance();
		if (timeOption.equalsIgnoreCase(timeOptions[0])) {
			cal.add(Calendar.DATE, 0);
		} else if (timeOption.equalsIgnoreCase(timeOptions[1])) {
			cal.add(Calendar.DATE, 1);
		} else if (timeOption.equalsIgnoreCase(timeOptions[2])) {
			cal.add(Calendar.DATE, 2);
		} else if (timeOption.equalsIgnoreCase(timeOptions[3])) {
			cal.add(Calendar.DATE, 3);
		} else if (timeOption.equalsIgnoreCase(timeOptions[4])) {
			cal.add(Calendar.DATE, 4);
		} else if (timeOption.equalsIgnoreCase(timeOptions[5])) {
			cal.add(Calendar.DATE, 5);
		} else if (timeOption.equalsIgnoreCase(timeOptions[6])) {
			cal.add(Calendar.WEEK_OF_YEAR, 1);
		} else if (timeOption.equalsIgnoreCase(timeOptions[7])) {
			cal.add(Calendar.WEEK_OF_YEAR, 2);
		} else if (timeOption.equalsIgnoreCase(timeOptions[8])) {
			cal.add(Calendar.WEEK_OF_YEAR, 3);
		} else if (timeOption.equalsIgnoreCase(timeOptions[9])) {
			cal.add(Calendar.MONTH, 1);
		}
		task.setEndTime(parseDate.getDateString(cal) + "2359");
		
		return task;
	}
	
	
	
	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\ui\widgets\UpcomingTasksWidget.java





