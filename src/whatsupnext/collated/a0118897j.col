//@author: a0118897j



	/**
	 * origin: C:\Users\Anand Sundaram\Documents\GitHub\main\src\whatsupnext\junit\StorageTest.java
	 */

package whatsupnext.junit;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import whatsupnext.storage.Storage;
import whatsupnext.structure.Task;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class StorageTest {
	Storage obj;
	Task dummyTask1;
	Task dummyTask2;
	Task dummyTask3;
	ArrayList<Task> tasksToCompare;
	ArrayList<Task> taskArray1;
	ArrayList<Task> taskArray2;
	ArrayList<Task> taskArray3;
	
	public final static String DELIMITER = "%#";	
	
	@Before
	public void initialize() {
		Storage.tryInitialize("storageTest");
		obj = Storage.getInstance();
		
		setUpDummyTasks();
		setUpTaskArrays();
	}
	
	@After
	public void deleteFiles() {
		try {
			obj.clearFile();
			obj.deleteFileVersions();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Testing the helper code to make sure it's working
	 */
	@Test
	public void testStringToTask() {
		assertEquals(dummyTask1.getTaskID(), "DummyTaskID1");
		assertEquals(dummyTask1.getDescription(), "DummyDescription1");
		assertEquals(dummyTask1.getStartTime(), "DummyStartTime1");
		assertEquals(dummyTask1.getEndTime(), "DummyEndTime1");
		assertEquals(dummyTask1.getDone(), true);		
	}
	
	/**
	 * Tests whether entering tasks into the storage file and reading from the storage file
	 * is working or not
	 * @throws IOException
	 */
	@Test
	public void testInputAndReadTasks() throws IOException {
		assertTrue(obj.inputTasks(taskArray3));
		tasksToCompare = obj.readTasks();
		assertEquals(taskArray3, tasksToCompare);
	}
	
	/**
	 * Runs a series of tests in a certain order
	 * @throws IOException
	 */
	@Test
	public void testUndoRedo() throws IOException {
		undo();
		redo();	
		undoBoundary();
		redoAfterChange();
		undoBeyondExistingVersions();
	}
	
	/**
	 * Creates dummy tasks that will later be written to the file for testing
	 */
	private void setUpDummyTasks() {
		dummyTask1 = stringToTask("DummyTaskID1" + DELIMITER + "DummyDescription1" + DELIMITER + 
				"DummyStartTime1" + DELIMITER + "DummyEndTime1" + DELIMITER + "true" + DELIMITER);
		dummyTask2 = stringToTask("DummyTaskID2" + DELIMITER + "DummyDescription2" + DELIMITER + 
				"DummyStartTime2" + DELIMITER + "DummyEndTime2" + DELIMITER + "false" + DELIMITER);
		dummyTask3 = stringToTask("DummyTaskID3" + DELIMITER + "DummyDescription3" + DELIMITER + 
				"DummyStartTime3" + DELIMITER + "DummyEndTime3" + DELIMITER + "true" + DELIMITER);
	}
	
	/**
	 * Creates ArrayLists of tasks for common use in functions
	 */
	private void setUpTaskArrays() {
		taskArray1 = new ArrayList<Task>();
		taskArray1.add(dummyTask1);
		
		taskArray2 = new ArrayList<Task>();
		taskArray2.add(dummyTask1);
		taskArray2.add(dummyTask2);
		
		taskArray3 = new ArrayList<Task>();
		taskArray3.add(dummyTask1);
		taskArray3.add(dummyTask2);
		taskArray3.add(dummyTask3);
	}
	
	/**
	 * Attempts a single undo after two entries to the file
	 * @throws IOException
	 */
	private void undo() throws IOException {
		assertTrue(obj.inputTasks(taskArray1));
		tasksToCompare = obj.readTasks();		
		assertEquals(taskArray1, tasksToCompare);		
		
		assertTrue(obj.inputTasks(taskArray2));
		tasksToCompare = obj.readTasks();		
		assertEquals(taskArray2, tasksToCompare);
		
		assertTrue(obj.goToPreviousVersion());		
		tasksToCompare = obj.readTasks();		
		assertEquals(taskArray1, tasksToCompare);
	}
	
	/**
	 * Attempts a single redo as a continuation of the method above
	 * @throws IOException
	 */
	private void redo() throws IOException {
		assertTrue(obj.goToNextVersion());
		tasksToCompare = obj.readTasks();
		assertEquals(taskArray2, tasksToCompare);
	}
	
	/**
	 * Attempts an undo right after a redo
	 * @throws IOException
	 */
	private void undoBoundary() throws IOException {
		assertTrue(obj.inputTasks(taskArray3));
		tasksToCompare = obj.readTasks();
		assertEquals(taskArray3, tasksToCompare);
		
		assertTrue(obj.goToPreviousVersion());
		tasksToCompare = obj.readTasks();
		assertEquals(taskArray2, tasksToCompare);
	}
	
	/** 
	 * Attempts to redo right after a change has been made following an undo
	 * @throws IOException
	 */
	private void redoAfterChange() throws IOException {
		assertTrue(obj.inputTasks(taskArray2));
		tasksToCompare = obj.readTasks();
		assertEquals(taskArray2, tasksToCompare);
		
		assertFalse(obj.goToNextVersion());
	}
	
	/**
	 * Attempts to access a version of tasks list beyond the ones which exist
	 * @throws IOException
	 */
	private void undoBeyondExistingVersions() throws IOException {
		assertTrue(obj.goToPreviousVersion());
		assertTrue(obj.goToPreviousVersion());
		assertTrue(obj.goToPreviousVersion());
		assertFalse(obj.goToPreviousVersion());
		assertFalse(obj.goToPreviousVersion());
	}
	
	/**
	 * A helper function that converts a String in a specific format to a Task object
	 * @param taskInString
	 * @return
	 */
	private Task stringToTask(String taskInString) {
		Scanner extractFromString = new Scanner(taskInString);
		extractFromString.useDelimiter(DELIMITER);
		
		String taskID = extractFromString.next();
		String description = extractFromString.next();
		String startTime = extractFromString.next();
		String endTime = extractFromString.next();
		String booleanString = extractFromString.next();
		
		assertTrue(booleanString.equals("true") || booleanString.equals("false"));		
		boolean isDone = Boolean.parseBoolean(booleanString);
		
		Task taskFromString = new Task();
		taskFromString.setTaskID(taskID);
		taskFromString.setDescription(description);
		taskFromString.setStartTime(startTime);
		taskFromString.setEndTime(endTime);
		taskFromString.setDone(isDone);
		
		extractFromString.close();
		
		return taskFromString;
	}
}

	// End of segment: C:\Users\Anand Sundaram\Documents\GitHub\main\src\whatsupnext\junit\StorageTest.java





	/**
	 * origin: C:\Users\Anand Sundaram\Documents\GitHub\main\src\whatsupnext\storage\JSONHelper.java
	 */

package whatsupnext.storage;

import static org.junit.Assert.assertNotNull;
import whatsupnext.structure.Task;

import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class JSONHelper {
	
	/**
	 * Converts a String in JSON format to a Task object
	 * @param input
	 * @return
	 */
	public Task JSONStringToTask(String input) {
		
		try {
			JSONParser parser = new JSONParser();
		    Object parsedJSON = parser.parse(input);
		    JSONArray arr = (JSONArray) parsedJSON;
		    
		    String taskID = (String) arr.get(0);
	    	String description = (String) arr.get(1);
	    	String startTime = (String) arr.get(2);
	    	String endTime = (String) arr.get(3);
	    	boolean isDone = (boolean) arr.get(4);
	    	
	    	Task taskFromJSON = new Task();
	    	taskFromJSON.setTaskID(taskID);
	    	taskFromJSON.setDescription(description);
	    	taskFromJSON.setStartTime(startTime);
	    	taskFromJSON.setEndTime(endTime);
	    	taskFromJSON.setDone(isDone);
	    	
			return taskFromJSON;
		}
		catch (ParseException p) {
			return null;
		}
	}
	
	/**
	 * Converts a Task object to a String in JSON format
	 * @param task
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public String taskToJSONString(Task task) {
		assertNotNull(task.getTaskID());
		assertNotNull(task.getDescription());
		assertNotNull(task.getStartTime());
		assertNotNull(task.getEndTime());
		assertNotNull(task.getDone());
		
		JSONArray taskDetailsArray = new JSONArray();
		
		taskDetailsArray.add(task.getTaskID());
		taskDetailsArray.add(task.getDescription());
		taskDetailsArray.add(task.getStartTime());
		taskDetailsArray.add(task.getEndTime());
		taskDetailsArray.add(task.getDone());
		
		return taskDetailsArray.toJSONString();
	}

}

	// End of segment: C:\Users\Anand Sundaram\Documents\GitHub\main\src\whatsupnext\storage\JSONHelper.java





	/**
	 * origin: C:\Users\Anand Sundaram\Documents\GitHub\main\src\whatsupnext\storage\Storage.java
	 */

package whatsupnext.storage;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import whatsupnext.structure.Task;


public class Storage {
	
	private static Storage storageSingleton;
	private String FILE_NAME;
	private final static String EXTENSION = ".txt";
	private final boolean SUCCESS = true;
	private final boolean FAILURE = false;	 
		
	private static ArrayList<ArrayList<Task>> arrayOfVersions;
	private static int currentVersionNumber;
	
	private static JSONHelper JSONWrapper;
	
	/**
	 * Tries to initialize the Storage singleton with the file name
	 * @param fileName
	 * @return
	 * 		True if successful or False otherwise
	 */
	public static boolean tryInitialize(String fileName) {		
		if (storageSingleton == null) {
			storageSingleton = new Storage(fileName);
			return true;
		}
		return false;
	}
	
	/**
	 * Provides reference of the Storage singleton if it exists, or returns it after creating it
	 * @return
	 */
	public static Storage getInstance() {
		if (storageSingleton == null) {
			storageSingleton = new Storage("tasks");
		}
		return storageSingleton;
	}
	
	/**
	 * A private constructor to enable Singleton Pattern
	 * @param fileName
	 */
	private Storage(String fileName) {
		FILE_NAME = fileName;		
		File textFile = new File(FILE_NAME + EXTENSION);
		if (!textFile.exists()) {
			try {
				textFile.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
			
		arrayOfVersions = new ArrayList<ArrayList<Task>>();
		currentVersionNumber = 0;
		
		JSONWrapper = new JSONHelper();
		
		try {
			arrayOfVersions.add(readTasks());
		}
		catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	/**
	 * Calls the writeTasksToFile function if the ArrayList is valid. Returns true if writing was 
	 * successful, and false otherwise.
	 * @param tasks
	 * @return
	 * @throws IOException
	 */
	public boolean inputTasks(ArrayList<Task> tasks) throws IOException {
		if (isValidInput(tasks)) {
			setNewVersion(tasks);
			writeTasksToFile(tasks);
			return SUCCESS;
		} else if (tasks.size() == 0) {
			clearFile();
			return SUCCESS;
		} else {
			return FAILURE;
		}		
	}	
	
	/**
	 * Writes the tasks to the file, one on each line, in JSON format.
	 * @param tasks
	 * @throws IOException
	 */
	private void writeTasksToFile(ArrayList<Task> tasks) throws IOException {
		BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME + EXTENSION));
		
		for (int x = 0; x < tasks.size(); x++) {
			Task taskToBeWritten = tasks.get(x);
			writer.write(JSONWrapper.taskToJSONString(taskToBeWritten));
			writer.newLine();
			writer.flush();
		}		
		writer.close();
	}
		
	/**
	 * Checks if the ArrayList of tasks is valid, namely that the tasks field is not empty.
	 * @param tasks
	 * @return
	 */
	private boolean isValidInput(ArrayList<Task> tasks) {
		if (tasks == null || tasks.size() == 0) {
			return FAILURE;
		}
		else {
			return SUCCESS;
		}
	}
	
	/**
	 * Calls the readFromFile function, and returns the ArrayList of tasks read from the file if it is not empty.
	 * @return
	 * @throws IOException
	 */
	public ArrayList<Task> readTasks() throws IOException {
		ArrayList<Task> arrayOfTasks = readFromFile();
		if (arrayOfTasks.size() > 0) {
			return arrayOfTasks;
		}
		else {
			return new ArrayList<Task>();
		}
	}
	
	/**
	 * Reads the contents of the file, converts each line to a task, and returns all of them as 
	 * an ArrayList of tasks.
	 * @return
	 * @throws IOException
	 */
	private ArrayList<Task> readFromFile() throws IOException {
		Scanner reader = new Scanner(new File(FILE_NAME + EXTENSION));
		ArrayList<Task> tasks = new ArrayList<Task>();
		while (reader.hasNextLine()) {
			tasks.add(JSONWrapper.JSONStringToTask(reader.nextLine()));
		}
		reader.close();
		return tasks;
	}
	
	/**
	 * Empties the file by overwriting previous data
	 * @throws IOException
	 */
	public void clearFile() throws IOException {
		BufferedWriter clearingWriter = new BufferedWriter(new FileWriter(FILE_NAME + EXTENSION, false));
		
		clearingWriter.close();
	}
	
	/**
	 * Initializes a new version of tasks list and stores it in the 
	 * ArrayList of ArrayList of tasks so as to enable undo/redo
	 * @param tasks
	 * @throws IOException
	 */
	private void setNewVersion(ArrayList<Task> tasks) throws IOException {
		if (currentVersionNumber < arrayOfVersions.size() - 1) {
			deleteLaterVersions();
		}
		currentVersionNumber++;		
		ArrayList<Task> tasksCopy = new ArrayList<Task>();
		for (int x = 0; x < tasks.size(); x++) {
			tasksCopy.add(tasks.get(x));
		}
		arrayOfVersions.add(tasksCopy);
	}	
	
	/**
	 * Deletes the old branch of versions after changes have been made
	 * following an undo
	 * @throws IOException
	 */
	private void deleteLaterVersions() throws IOException {
		int initialSize = arrayOfVersions.size();
		for (int x = 0; x < initialSize - currentVersionNumber - 1; x++) {
			arrayOfVersions.remove(currentVersionNumber + 1);
		}
	}
	
	/**
	 * Migrates to the preceding tasks list version if it exists
	 * and writes it to the file 
	 * @return
	 */
	public boolean goToPreviousVersion() {
		try {
			if (arrayOfVersions.size() > 1 && currentVersionNumber > 0) {
				writeTasksToFile(arrayOfVersions.get(currentVersionNumber - 1));
				currentVersionNumber = currentVersionNumber - 1;
				return SUCCESS;
			}
			else {
				return FAILURE;
			}
		}
		catch (IOException e) {
			return FAILURE;
		}
	}	
	
	/**
	 * Migrates to the succeeding tasks list version if it exists
	 * and writes it to the file
	 * @return
	 */
	public boolean goToNextVersion() {
		try {
			if (currentVersionNumber < arrayOfVersions.size() - 1) {
				writeTasksToFile(arrayOfVersions.get(currentVersionNumber + 1));
				currentVersionNumber = currentVersionNumber + 1;
				return SUCCESS;
			}
			else {
				return FAILURE;
			}
		}
		catch (IOException e) {
			return FAILURE;
		}
	}	
	
	/**
	 * Clears the different versions of the tasks list 
	 * @throws IOException
	 */
	public void deleteFileVersions() throws IOException {
		currentVersionNumber = 0;
		arrayOfVersions = new ArrayList<ArrayList<Task>>();
		arrayOfVersions.add(readTasks());
	} 
}

	// End of segment: C:\Users\Anand Sundaram\Documents\GitHub\main\src\whatsupnext\storage\Storage.java





	/**
	 * origin: C:\Users\Anand Sundaram\Documents\GitHub\main\src\whatsupnext\structure\Help.java
	 */

package whatsupnext.structure;

public class Help {
	
	private static final String INDENT = "\t";
	private static final String NEWLINE = "\n";
	
	public static final String DEFAULT_HELP_MESSAGE = "Supported Commands:"
			+ NEWLINE + "add" + INDENT + "Add a task by with description only"
			+ NEWLINE + INDENT + "or append it with a deadline or time"
			+ NEWLINE + INDENT + "period."
			+ NEWLINE + "view" + INDENT + "Display the upcoming task or the"
			+ NEWLINE + INDENT + "tasks for the day. A time frame can" 
			+ NEWLINE + INDENT + "be specified too."
			+ NEWLINE + "update" + INDENT + "Update the description, deadline,"
			+ NEWLINE + INDENT + "start or end time of a task."
			+ NEWLINE + "delete" + INDENT + "Delete by id, date, deadline, or"
			+ NEWLINE + INDENT + "time frame."
			+ NEWLINE + "search" + INDENT + "Search for a task by its keyword."
			+ NEWLINE + "done" + INDENT + "Label a task as done."
			+ NEWLINE + "undo" + INDENT + "Undo most recent add/update/delete."
			+ NEWLINE + "redo" + INDENT + "Redo the most recent undo."
			+ NEWLINE + "exit" + INDENT + "Close WhatsUpNext."
			+ NEWLINE
			+ NEWLINE + "Type \"help <command>\" to find out more."
			+ NEWLINE + "Type \"help time\" to see time/date formats.";
	
	public static final String ADD_HELP_MESSAGE = "add" + INDENT + "Add a task by with description only"
			+ NEWLINE + INDENT + "or append it with a deadline or time"
			+ NEWLINE + INDENT + "period."
			+ NEWLINE
			+ NEWLINE + "Formats supported:"
			+ NEWLINE + "add [task]"
			+ NEWLINE + "add [task] by [end_time]" 
			+ NEWLINE + "add [task] from [start_time] to [end_time]"
			+ NEWLINE
			+ NEWLINE + "Aliases supported:"
			+ NEWLINE + "\'add\', \'a\'";
	
	public static final String VIEW_HELP_MESSAGE = "view" + INDENT + "Display the upcoming task or the"
			+ NEWLINE + INDENT + "tasks for the day. A time frame can" 
			+ NEWLINE + INDENT + "be specified too."
			+ NEWLINE
			+ NEWLINE + "Formats supported:"
			+ NEWLINE + "view all"
			+ NEWLINE + "view next"
			+ NEWLINE + "view [day|date]"
			+ NEWLINE + "view from [start_time] to [end_time]"
			+ NEWLINE
			+ NEWLINE + "Aliases supported:"
			+ NEWLINE + "\'view\', \'v\', \'list\', \'ls\', \'l\'";
	
	public static final String UPDATE_HELP_MESSAGE =  "update" + INDENT + "Update the description, deadline,"
			+ NEWLINE + INDENT + "start or end time of a task."
			+ NEWLINE
			+ NEWLINE + "Formats supported:"
			+ NEWLINE + "update [task_id] [new_description]"
			+ NEWLINE + "update [task_id] by [end_time]"
			+ NEWLINE + "update [task_id] from [start_time] to [end_time]"
			+ NEWLINE
			+ NEWLINE + "Aliases supported:"
			+ NEWLINE + "\'update\', \'u\', \'edit\', \'e\', \'modify\', \'m\'";
			
	public static final String DELETE_HELP_MESSAGE = "delete" + INDENT + "Delete by id, date, deadline, or"
			+ NEWLINE + INDENT + "time frame."
			+ NEWLINE
			+ NEWLINE + "Formats supported:"
			+ NEWLINE + "delete [task_id]"
			+ NEWLINE + "delete deadline"
			+ NEWLINE + "delete [date]"
			+ NEWLINE + "delete from [start_time] to [end_time]"
			+ NEWLINE
			+ NEWLINE + "Aliases supported:"
			+ NEWLINE + "\'delete\', \'del\', \'d\'";

	public static final String SEARCH_HELP_MESSAGE = "search" + INDENT + "Search for a task by its keyword."
			+ NEWLINE
			+ NEWLINE + "Formats supported:" 
			+ NEWLINE + "search [keywords]"
			+ NEWLINE
			+ NEWLINE + "Aliases supported:"
			+ NEWLINE + "\'search\', \'s\', \'find\', \'f\'";
	
	public static final String DONE_HELP_MESSAGE = "done" + INDENT + "Label a task as done."
			+ NEWLINE
			+ NEWLINE + "Formats supported:"
			+ NEWLINE + "done [task_id]";
	
	public static final String UNDO_HELP_MESSAGE = "undo" + INDENT + "Undo most recent add/update/delete.";
	
	public static final String REDO_HELP_MESSAGE = "redo" + INDENT + "Redo the most recent undo.";
	
	public static final String EXIT_HELP_MESSAGE = "exit" + INDENT + "Close WhatsUpNext.";
	
	public static final String TIME_HELP_MESSAGE = "Time formats supported:"
			+ NEWLINE + "24-hour clock" + INDENT + "\'09:00\', \'2359\'" 
			+ NEWLINE + "12-hour clock" + INDENT + "\'9:00 am, \'11 pm"
			+ NEWLINE
			+ NEWLINE + "Date formats supported:"
			+ NEWLINE + "DayMonthYear" + INDENT + "\'021114\', \'31102014\'"
			+ NEWLINE + "Day/Month/Year" + INDENT + "\'02/11/14\', \'31/10/2014\'"
			+ NEWLINE + "Day-Month-Year" + INDENT + "\'02-11-14\', \'31-10-2014\'"
			+ NEWLINE
			+ NEWLINE + "Special formats supported:"
			+ NEWLINE + "Day of Week" + INDENT + "\'monday\', \'mon\'"
			+ NEWLINE + "Today date" + INDENT + INDENT + "\'today\'"
			+ NEWLINE + "Tomorrow date" + INDENT + "\'tomorrow\', \'tml\'"
			+ NEWLINE + "Current Time" + INDENT + "\'now\'"
			+ NEWLINE
			+ NEWLINE + "Valid examples:"
			+ NEWLINE + "\'0000 010114\', \'31/12/2014 23:59\'"
			+ NEWLINE + "\'7:30 am sunday\', \'tml 12 pm\'"
			+ NEWLINE + "\'0930 10-11-14\', \'11:30 am today\'"
			+ NEWLINE +  "\'now\'"
			+ NEWLINE
			+ NEWLINE + "Things to note:"
			+ NEWLINE + "When day of week is specified, it is referring to the upcoming day of week."
			+ NEWLINE + "When only time is specified, it will be assigned with today date."
			+ NEWLINE + "When only date is specified, it will be assigned either 0000 for start time or 2359 for end time.";
	
}

	// End of segment: C:\Users\Anand Sundaram\Documents\GitHub\main\src\whatsupnext\structure\Help.java





