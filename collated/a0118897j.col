//@author: a0118897j



	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\junit\storage\JSONHelperTest.java
	 */

package whatsupnext.junit.storage;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import whatsupnext.storage.JSONHelper;
import whatsupnext.structure.util.Task;

public class JSONHelperTest {
	JSONHelper obj;
	String inputJSONString;
	
	@Before
	public void initialize() {
		obj = new JSONHelper();
		inputJSONString = "[\"DummyTaskID1\",\"DummyDescription1\",\"DummyStartTime1\",\"DummyEndTime1\",true]";
	}
	
	@Test
	public void testJSONStringToTask() {
		Task testTask = obj.JSONStringToTask(inputJSONString);
		assertEquals(testTask.getTaskID(), "DummyTaskID1");
		assertEquals(testTask.getDescription(), "DummyDescription1");
		assertEquals(testTask.getStartTime(), "DummyStartTime1");
		assertEquals(testTask.getEndTime(), "DummyEndTime1");
		assertEquals(testTask.getDone(), true);		
	}
	
	@Test
	public void testTaskToJSONString() {
		Task task = new Task();
    	task.setTaskID("DummyTaskID1");
    	task.setDescription("DummyDescription1");
    	task.setStartTime("DummyStartTime1");
    	task.setEndTime("DummyEndTime1");
    	task.setDone(true);
    	
    	String testString = obj.taskToJSONString(task);    	
    	
    	assertEquals(inputJSONString, testString);
    	
	}
}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\junit\storage\JSONHelperTest.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\junit\storage\StorageTest.java
	 */

package whatsupnext.junit.storage;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import whatsupnext.storage.Storage;
import whatsupnext.storage.JSONHelper;
import whatsupnext.structure.util.Task;

import java.io.IOException;
import java.util.ArrayList;

public class StorageTest {
	Storage obj;
	JSONHelper jsonHelperObject;
	Task dummyTask1;
	Task dummyTask2;
	Task dummyTask3;
	ArrayList<Task> tasksToCompare;
	ArrayList<Task> taskArray1;
	ArrayList<Task> taskArray2;
	ArrayList<Task> taskArray3;
	
	@Before
	public void initialize() {
		Storage.tryInitialize("storageTest");
		obj = Storage.getInstance();
		jsonHelperObject = new JSONHelper();
		setUpDummyTasks();
		setUpTaskArrays();
	}
	
	@After
	public void deleteFiles() {
		try {
			obj.clearFile();
			obj.deleteFileVersions();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Tests whether entering tasks into the storage file and reading from the storage file
	 * is working or not
	 * @throws IOException
	 */
	@Test
	public void testInputAndReadTasks() throws IOException {
		assertTrue(obj.inputTasks(taskArray3));
		tasksToCompare = obj.readTasks();
		assertEquals(taskArray3, tasksToCompare);
	}
	
	/**
	 * Runs a series of tests in a certain order
	 * @throws IOException
	 */
	@Test
	public void testUndoRedo() throws IOException {
		undo();
		redo();	
		undoBoundary();
		redoAfterChange();
		undoBeyondExistingVersions();
	}
	
	/**
	 * Creates dummy tasks that will later be written to the file for testing
	 */
	private void setUpDummyTasks() {		
		dummyTask1 = jsonHelperObject.JSONStringToTask("[\"DummyTaskID1\",\"DummyDescription1\","
				+ "\"DummyStartTime1\",\"DummyEndTime1\",true]");
		
		dummyTask2 = jsonHelperObject.JSONStringToTask("[\"DummyTaskID2\",\"DummyDescription2\","
				+ "\"DummyStartTime2\",\"DummyEndTime2\",false]");
		
		dummyTask3 = jsonHelperObject.JSONStringToTask("[\"DummyTaskID3\",\"DummyDescription3\","
				+ "\"DummyStartTime3\",\"DummyEndTime3\",true]");
	}
	
	/**
	 * Creates ArrayLists of tasks for common use in functions
	 */
	private void setUpTaskArrays() {
		taskArray1 = new ArrayList<Task>();
		taskArray1.add(dummyTask1);
		
		taskArray2 = new ArrayList<Task>();
		taskArray2.add(dummyTask1);
		taskArray2.add(dummyTask2);
		
		taskArray3 = new ArrayList<Task>();
		taskArray3.add(dummyTask1);
		taskArray3.add(dummyTask2);
		taskArray3.add(dummyTask3);
	}
	
	/**
	 * Attempts a single undo after two entries to the file
	 * @throws IOException
	 */
	private void undo() throws IOException {
		assertTrue(obj.inputTasks(taskArray1));
		tasksToCompare = obj.readTasks();		
		assertEquals(taskArray1, tasksToCompare);		
		
		assertTrue(obj.inputTasks(taskArray2));
		tasksToCompare = obj.readTasks();		
		assertEquals(taskArray2, tasksToCompare);
		
		assertTrue(obj.goToPreviousVersion());		
		tasksToCompare = obj.readTasks();		
		assertEquals(taskArray1, tasksToCompare);
	}
	
	/**
	 * Attempts a single redo as a continuation of the method above
	 * @throws IOException
	 */
	private void redo() throws IOException {
		assertTrue(obj.goToNextVersion());
		tasksToCompare = obj.readTasks();
		assertEquals(taskArray2, tasksToCompare);
	}
	
	/**
	 * Attempts an undo right after a redo
	 * @throws IOException
	 */
	private void undoBoundary() throws IOException {
		assertTrue(obj.inputTasks(taskArray3));
		tasksToCompare = obj.readTasks();
		assertEquals(taskArray3, tasksToCompare);
		
		assertTrue(obj.goToPreviousVersion());
		tasksToCompare = obj.readTasks();
		assertEquals(taskArray2, tasksToCompare);
	}
	
	/** 
	 * Attempts to redo right after a change has been made following an undo
	 * @throws IOException
	 */
	private void redoAfterChange() throws IOException {
		assertTrue(obj.inputTasks(taskArray2));
		tasksToCompare = obj.readTasks();
		assertEquals(taskArray2, tasksToCompare);
		
		assertFalse(obj.goToNextVersion());
	}
	
	/**
	 * Attempts to access a version of tasks list beyond the ones which exist
	 * @throws IOException
	 */
	private void undoBeyondExistingVersions() throws IOException {
		assertTrue(obj.goToPreviousVersion());
		assertTrue(obj.goToPreviousVersion());
		assertTrue(obj.goToPreviousVersion());
		assertFalse(obj.goToPreviousVersion());
		assertFalse(obj.goToPreviousVersion());
	}
}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\junit\storage\StorageTest.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\junit\ui\GUIBehaviorTest.java
	 */

	@Test
	public void ViewAllTest() {
		textInput.setText("add floating task test");
		buttonEnter.doClick();

		assertEquals("\nSuccessfully added to task 1.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("1: floating task test\n\tNot done.", textDisplayFloating.getText());
		
		textInput.setText("done 1");
		buttonEnter.doClick();
		
		assertEquals("\nTask 1 is successfully labeled as done.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("No tasks to display!", textDisplayFloating.getText());
		
		textInput.setText("add floating task test 2");
		buttonEnter.doClick();

		assertEquals("\nSuccessfully added to task 2.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("2: floating task test 2\n\tNot done.", textDisplayFloating.getText());
		
		textInput.setText("view all");
		buttonEnter.doClick();
		
		assertEquals("\n1: floating task test\n\tDone.\n2: floating task test 2\n\tNot done.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("2: floating task test 2\n\tNot done.", textDisplayFloating.getText());
	}

	@Test
	public void UpdateDescriptionTest() {
		textInput.setText("add floating task test");
		buttonEnter.doClick();

		assertEquals("\nSuccessfully added to task 1.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("1: floating task test\n\tNot done.", textDisplayFloating.getText());
		
		textInput.setText("update 1 floating task with update test");
		buttonEnter.doClick();
		
		assertEquals("\nSuccessfully updated the description of task 1.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("1: floating task with update test\n\tNot done.", textDisplayFloating.getText());
	}

	@Test
	public void SearchEmptyTest() {
		textInput.setText("add floating task test");
		buttonEnter.doClick();

		assertEquals("\nSuccessfully added to task 1.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("1: floating task test\n\tNot done.", textDisplayFloating.getText());
		
		textInput.setText("search xyz");
		buttonEnter.doClick();
		
		assertEquals("\nNo tasks are found.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("1: floating task test\n\tNot done.", textDisplayFloating.getText());
	}

	@Test
	public void SearchTextTest() {
		textInput.setText("add floating task test");
		buttonEnter.doClick();

		assertEquals("\nSuccessfully added to task 1.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("1: floating task test\n\tNot done.", textDisplayFloating.getText());
		
		textInput.setText("search floating");
		buttonEnter.doClick();
		
		assertEquals("\n1: floating task test\n\tNot done.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("1: floating task test\n\tNot done.", textDisplayFloating.getText());
	}

	@Test
	public void UndoTest() {
		textInput.setText("add floating task test");
		buttonEnter.doClick();

		assertEquals("\nSuccessfully added to task 1.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("1: floating task test\n\tNot done.", textDisplayFloating.getText());
		
		textInput.setText("undo");
		buttonEnter.doClick();
		
		assertEquals("\nThe execution was canceled.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("No tasks to display!", textDisplayFloating.getText());
		
		textInput.setText("undo");
		buttonEnter.doClick();
		
		assertEquals("\nCannot execute undo command.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("No tasks to display!", textDisplayFloating.getText());

	}

	@Test
	public void RedoTest() {
		textInput.setText("add floating task test");
		buttonEnter.doClick();

		assertEquals("\nSuccessfully added to task 1.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("1: floating task test\n\tNot done.", textDisplayFloating.getText());
		
		textInput.setText("undo");
		buttonEnter.doClick();
		
		assertEquals("\nThe execution was canceled.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("No tasks to display!", textDisplayFloating.getText());
		
		textInput.setText("redo");
		buttonEnter.doClick();
		
		assertEquals("\nThe execution was re executed.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("1: floating task test\n\tNot done.", textDisplayFloating.getText());
		
		textInput.setText("redo");
		buttonEnter.doClick();
		
		assertEquals("\nCannot execute redo command.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("1: floating task test\n\tNot done.", textDisplayFloating.getText());
	}

	@Test
	public void LabelDoneTest() {
		textInput.setText("add floating task test");
		buttonEnter.doClick();

		assertEquals("\nSuccessfully added to task 1.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("1: floating task test\n\tNot done.", textDisplayFloating.getText());
		
		textInput.setText("done 1");
		buttonEnter.doClick();
		
		assertEquals("\nTask 1 is successfully labeled as done.\n", textDisplayMain.getText());
		assertEquals("No tasks to display!", textDisplayUpcoming.getText());
		assertEquals("No tasks to display!", textDisplayFloating.getText());
	}
	
	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\junit\ui\GUIBehaviorTest.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\storage\JSONHelper.java
	 */

package whatsupnext.storage;

import static org.junit.Assert.assertNotNull;
import whatsupnext.structure.util.Task;

import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class JSONHelper {
	
	/**
	 * Converts a String in JSON format to a Task object
	 * @param input
	 * @return
	 */
	public Task JSONStringToTask(String input) {
		
		try {
			JSONParser parser = new JSONParser();
		    Object parsedJSON = parser.parse(input);
		    JSONArray arr = (JSONArray) parsedJSON;
		    
		    String taskID = (String) arr.get(0);
	    	String description = (String) arr.get(1);
	    	String startTime = (String) arr.get(2);
	    	String endTime = (String) arr.get(3);
	    	boolean isDone = (boolean) arr.get(4);
	    	
	    	Task taskFromJSON = new Task();
	    	taskFromJSON.setTaskID(taskID);
	    	taskFromJSON.setDescription(description);
	    	taskFromJSON.setStartTime(startTime);
	    	taskFromJSON.setEndTime(endTime);
	    	taskFromJSON.setDone(isDone);
	    	
			return taskFromJSON;
		}
		catch (ParseException p) {
			return null;
		}
	}
	
	/**
	 * Converts a Task object to a String in JSON format
	 * @param task
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public String taskToJSONString(Task task) {
		assertNotNull(task.getTaskID());
		assertNotNull(task.getDescription());
		assertNotNull(task.getStartTime());
		assertNotNull(task.getEndTime());
		assertNotNull(task.getDone());
		
		JSONArray taskDetailsArray = new JSONArray();
		
		taskDetailsArray.add(task.getTaskID());
		taskDetailsArray.add(task.getDescription());
		taskDetailsArray.add(task.getStartTime());
		taskDetailsArray.add(task.getEndTime());
		taskDetailsArray.add(task.getDone());
		
		return taskDetailsArray.toJSONString();
	}

}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\storage\JSONHelper.java





	/**
	 * origin: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\storage\Storage.java
	 */

package whatsupnext.storage;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import whatsupnext.structure.util.Task;


public class Storage {
	
	private static Storage storageSingleton;
	private String FILE_NAME;
	private final static String EXTENSION = ".txt";
	private final boolean SUCCESS = true;
	private final boolean FAILURE = false;	 
		
	private static ArrayList<ArrayList<Task>> arrayOfVersions;
	private static int currentVersionNumber;
	
	private static JSONHelper JSONWrapper;
	
	/**
	 * Tries to initialize the Storage singleton with the file name
	 * @param fileName
	 * @return
	 * 		True if successful or False otherwise
	 */
	public static boolean tryInitialize(String fileName) {		
		if (storageSingleton == null) {
			storageSingleton = new Storage(fileName);
			return true;
		}
		return false;
	}
	
	/**
	 * Provides reference of the Storage singleton if it exists, or returns it after creating it
	 * @return
	 */
	public static Storage getInstance() {
		if (storageSingleton == null) {
			storageSingleton = new Storage("tasks");
		}
		return storageSingleton;
	}
	
	/**
	 * A private constructor to enable Singleton Pattern
	 * @param fileName
	 */
	private Storage(String fileName) {
		FILE_NAME = fileName;		
		File textFile = new File(FILE_NAME + EXTENSION);
		if (!textFile.exists()) {
			try {
				textFile.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
			
		arrayOfVersions = new ArrayList<ArrayList<Task>>();
		currentVersionNumber = 0;
		
		JSONWrapper = new JSONHelper();
		
		try {
			arrayOfVersions.add(readTasks());
		}
		catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	/**
	 * Calls the writeTasksToFile function if the ArrayList is valid. Returns true if writing was 
	 * successful, and false otherwise.
	 * @param tasks
	 * @return
	 * @throws IOException
	 */
	public boolean inputTasks(ArrayList<Task> tasks) throws IOException {
		if (isValidInput(tasks)) {
			setNewVersion(tasks);
			writeTasksToFile(tasks);
			return SUCCESS;
		} else if (tasks.size() == 0) {
			clearFile();
			return SUCCESS;
		} else {
			return FAILURE;
		}		
	}	
	
	/**
	 * Writes the tasks to the file, one on each line, in JSON format.
	 * @param tasks
	 * @throws IOException
	 */
	private void writeTasksToFile(ArrayList<Task> tasks) throws IOException {
		BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME + EXTENSION));
		
		for (int x = 0; x < tasks.size(); x++) {
			Task taskToBeWritten = tasks.get(x);
			writer.write(JSONWrapper.taskToJSONString(taskToBeWritten));
			writer.newLine();
			writer.flush();
		}		
		writer.close();
	}
		
	/**
	 * Checks if the ArrayList of tasks is valid, namely that the tasks field is not empty.
	 * @param tasks
	 * @return
	 */
	private boolean isValidInput(ArrayList<Task> tasks) {
		if (tasks == null || tasks.size() == 0) {
			return FAILURE;
		}
		else {
			return SUCCESS;
		}
	}
	
	/**
	 * Calls the readFromFile function, and returns the ArrayList of tasks read from the file if it is not empty.
	 * @return
	 * @throws IOException
	 */
	public ArrayList<Task> readTasks() throws IOException {
		ArrayList<Task> arrayOfTasks = readFromFile();
		if (arrayOfTasks.size() > 0) {
			return arrayOfTasks;
		}
		else {
			return new ArrayList<Task>();
		}
	}
	
	/**
	 * Reads the contents of the file, converts each line to a task, and returns all of them as 
	 * an ArrayList of tasks.
	 * @return
	 * @throws IOException
	 */
	private ArrayList<Task> readFromFile() throws IOException {
		Scanner reader = new Scanner(new File(FILE_NAME + EXTENSION));
		ArrayList<Task> tasks = new ArrayList<Task>();
		while (reader.hasNextLine()) {
			tasks.add(JSONWrapper.JSONStringToTask(reader.nextLine()));
		}
		reader.close();
		return tasks;
	}
	
	/**
	 * Empties the file by overwriting previous data
	 * @throws IOException
	 */
	public void clearFile() throws IOException {
		BufferedWriter clearingWriter = new BufferedWriter(new FileWriter(FILE_NAME + EXTENSION, false));
		
		clearingWriter.close();
	}
	
	/**
	 * Initializes a new version of tasks list and stores it in the 
	 * ArrayList of ArrayList of tasks so as to enable undo/redo
	 * @param tasks
	 * @throws IOException
	 */
	private void setNewVersion(ArrayList<Task> tasks) throws IOException {
		if (currentVersionNumber < arrayOfVersions.size() - 1) {
			deleteLaterVersions();
		}
		currentVersionNumber++;		
		
		// A copy is created since using the same object reference will make the local  
		// version vulnerable to changes made to the ArrayList object in Logic.
		
		ArrayList<Task> tasksCopy = createTaskArrayCopy(tasks);
		arrayOfVersions.add(tasksCopy);
	}	
	
	private ArrayList<Task> createTaskArrayCopy(ArrayList<Task> tasks) {
		ArrayList<Task> tasksCopy = new ArrayList<Task>();
		for (int x = 0; x < tasks.size(); x++) {
			Task taskToBeCopied = tasks.get(x);
			tasksCopy.add(createTaskCopy(taskToBeCopied));
		}
		return tasksCopy;
	}
	
	private Task createTaskCopy(Task task) {
		Task taskCopy = new Task();
		
		taskCopy.setTaskID(task.getTaskID());
		taskCopy.setDescription(task.getDescription());
		taskCopy.setStartTime(task.getStartTime());
		taskCopy.setEndTime(task.getEndTime());
		taskCopy.setDone(task.getDone());	
		
		return taskCopy;
	}
	
	/**
	 * Deletes the old branch of versions after changes have been made
	 * following an undo
	 * @throws IOException
	 */
	private void deleteLaterVersions() throws IOException {
		int initialSize = arrayOfVersions.size();
		for (int x = 0; x < initialSize - currentVersionNumber - 1; x++) {
			arrayOfVersions.remove(currentVersionNumber + 1);
		}
	}
	
	/**
	 * Migrates to the preceding tasks list version if it exists
	 * and writes it to the file 
	 * @return
	 */
	public boolean goToPreviousVersion() {
		try {
			if (arrayOfVersions.size() > 1 && currentVersionNumber > 0) {
				writeTasksToFile(arrayOfVersions.get(currentVersionNumber - 1));
				currentVersionNumber = currentVersionNumber - 1;
				return SUCCESS;
			}
			else {
				return FAILURE;
			}
		}
		catch (IOException e) {
			return FAILURE;
		}
	}	
	
	/**
	 * Migrates to the succeeding tasks list version if it exists
	 * and writes it to the file
	 * @return
	 */
	public boolean goToNextVersion() {
		try {
			if (currentVersionNumber < arrayOfVersions.size() - 1) {
				writeTasksToFile(arrayOfVersions.get(currentVersionNumber + 1));
				currentVersionNumber = currentVersionNumber + 1;
				return SUCCESS;
			}
			else {
				return FAILURE;
			}
		}
		catch (IOException e) {
			return FAILURE;
		}
	}	
	
	/**
	 * Clears the different versions of the tasks list 
	 * @throws IOException
	 */
	public void deleteFileVersions() throws IOException {
		currentVersionNumber = 0;
		arrayOfVersions = new ArrayList<ArrayList<Task>>();
		arrayOfVersions.add(readTasks());
	} 
}

	// End of segment: C:\Users\KJX\git\cs2103aug2014-f09-1j\src\whatsupnext\storage\Storage.java





